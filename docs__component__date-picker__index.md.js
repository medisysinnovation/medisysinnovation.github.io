(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[10,4],{"0zqC":function(e,n,t){"use strict";t.r(n);var o=t("tJVT"),r=t("q1tI"),s=t.n(r),a=t("k3GJ"),i=t("9kvl"),l=t("dEAq"),c=t("ZpkN");t("TIsu");function d(e,n){var t,o=null===(t=e.match(/\.(\w+)$/))||void 0===t?void 0:t[1];return o||(o=n.tsx?"tsx":"jsx"),o}var u=e=>{var n,t,u,m=Object(r["useRef"])(),p=Object(r["useContext"])(l["context"]),f=p.locale,g=Object(l["useLocaleProps"])(f,e),v=Object(l["useDemoUrl"])(g.identifier),b=g.demoUrl||v,h=(null===i["a"]||void 0===i["a"]?void 0:i["a"].location.hash)==="#".concat(g.identifier),y=1===Object.keys(g.sources).length,I=Object(l["useCodeSandbox"])(null!==(n=g.hideActions)&&void 0!==n&&n.includes("CSB")?null:g),C=Object(l["useRiddle"])(null!==(t=g.hideActions)&&void 0!==t&&t.includes("RIDDLE")?null:g),k=Object(l["useMotions"])(g.motions||[],m.current),F=Object(o["a"])(k,2),x=F[0],w=F[1],R=Object(l["useCopy"])(),S=Object(o["a"])(R,2),T=S[0],E=S[1],B=Object(r["useState"])("_"),_=Object(o["a"])(B,2),P=_[0],L=_[1],M=Object(r["useState"])(d(P,g.sources[P])),D=Object(o["a"])(M,2),O=D[0],j=D[1],A=Object(r["useState"])(Boolean(g.defaultShowCode)),U=Object(o["a"])(A,2),N=U[0],V=U[1],q=Object(r["useState"])(Math.random()),J=Object(o["a"])(q,2),G=J[0],H=J[1],z=g.sources[P][O]||g.sources[P].content,K=Object(l["useTSPlaygroundUrl"])(f,z),W=Object(r["useRef"])(),X=Object(l["usePrefersColor"])(),$=Object(o["a"])(X,1),Y=$[0];function Z(e){L(e),j(d(e,g.sources[e]))}return Object(r["useEffect"])((()=>{H(Math.random())}),[Y]),s.a.createElement("div",{style:g.style,className:[g.className,"__dumi-default-previewer",h?"__dumi-default-previewer-target":""].filter(Boolean).join(" "),id:g.identifier,"data-debug":g.debug||void 0,"data-iframe":g.iframe||void 0},g.iframe&&s.a.createElement("div",{className:"__dumi-default-previewer-browser-nav"}),s.a.createElement("div",{ref:m,className:"__dumi-default-previewer-demo",style:{transform:g.transform?"translate(0, 0)":void 0,padding:g.compact||g.iframe&&!1!==g.compact?"0":void 0,background:g.background}},g.iframe?s.a.createElement("iframe",{title:"dumi-previewer",style:{height:String(g.iframe).replace(/(\d)$/,"$1px")},key:G,src:b,ref:W}):g.children),s.a.createElement("div",{className:"__dumi-default-previewer-desc","data-title":g.title},g.title&&s.a.createElement(l["AnchorLink"],{to:"#".concat(g.identifier)},g.title),g.description&&s.a.createElement("div",{dangerouslySetInnerHTML:{__html:g.description}})),s.a.createElement("div",{className:"__dumi-default-previewer-actions"},I&&s.a.createElement("button",{title:"Open demo on CodeSandbox.io",className:"__dumi-default-icon",role:"codesandbox",onClick:I}),C&&s.a.createElement("button",{title:"Open demo on Riddle",className:"__dumi-default-icon",role:"riddle",onClick:C}),g.motions&&s.a.createElement("button",{title:"Execute motions",className:"__dumi-default-icon",role:"motions",disabled:w,onClick:()=>x()}),g.iframe&&s.a.createElement("button",{title:"Reload demo iframe page",className:"__dumi-default-icon",role:"refresh",onClick:()=>H(Math.random())}),!(null!==(u=g.hideActions)&&void 0!==u&&u.includes("EXTERNAL"))&&s.a.createElement(l["Link"],{target:"_blank",to:b},s.a.createElement("button",{title:"Open demo in new tab",className:"__dumi-default-icon",role:"open-demo",type:"button"})),s.a.createElement("span",null),s.a.createElement("button",{title:"Copy source code",className:"__dumi-default-icon",role:"copy","data-status":E,onClick:()=>T(z)}),"tsx"===O&&N&&s.a.createElement(l["Link"],{target:"_blank",to:K},s.a.createElement("button",{title:"Get JSX via TypeScript Playground",className:"__dumi-default-icon",role:"change-tsx",type:"button"})),s.a.createElement("button",{title:"Toggle source code panel",className:"__dumi-default-icon".concat(N?" __dumi-default-btn-expand":""),role:"source",type:"button",onClick:()=>V(!N)})),N&&s.a.createElement("div",{className:"__dumi-default-previewer-source-wrapper"},!y&&s.a.createElement(a["default"],{className:"__dumi-default-previewer-source-tab",prefixCls:"__dumi-default-tabs",moreIcon:"\xb7\xb7\xb7",defaultActiveKey:P,onChange:Z},Object.keys(g.sources).map((e=>s.a.createElement(a["TabPane"],{tab:"_"===e?"index.".concat(d(e,g.sources[e])):e,key:e})))),s.a.createElement("div",{className:"__dumi-default-previewer-source"},s.a.createElement(c["a"],{code:z,lang:O,showCopy:!1}))))};n["default"]=u},"9kvl":function(e,n,t){"use strict";var o=t("FfOG");t.d(n,"a",(function(){return o["b"]}));t("bCY9")},KyRa:function(e,n,t){"use strict";t.r(n);var o=t("q1tI"),r=t.n(o),s=t("dEAq"),a=t("0zqC"),i=t("Rsk4"),l=r.a.memo(i["default"]["date-picker-range-picker"].component);n["default"]=e=>(r.a.useEffect((()=>{null!==e&&void 0!==e&&e.location.hash&&s["AnchorLink"].scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.a.createElement(r.a.Fragment,null,r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"markdown"},r.a.createElement("h2",{id:"range-picker"},r.a.createElement(s["AnchorLink"],{to:"#range-picker","aria-hidden":"true",tabIndex:-1},r.a.createElement("span",{className:"icon icon-link"})),"Range Picker")),r.a.createElement(a["default"],i["default"]["date-picker-range-picker"].previewerProps,r.a.createElement(l,null)),r.a.createElement("div",{className:"markdown"},r.a.createElement("h2",{id:"api"},r.a.createElement(s["AnchorLink"],{to:"#api","aria-hidden":"true",tabIndex:-1},r.a.createElement("span",{className:"icon icon-link"})),"API"),r.a.createElement("h3",{id:"range-picker-1"},r.a.createElement(s["AnchorLink"],{to:"#range-picker-1","aria-hidden":"true",tabIndex:-1},r.a.createElement("span",{className:"icon icon-link"})),"Range Picker"),r.a.createElement("table",null,r.a.createElement("thead",null,r.a.createElement("tr",null,r.a.createElement("th",null,"Property"),r.a.createElement("th",null,"Description"),r.a.createElement("th",null,"Type"),r.a.createElement("th",null,"Default"),r.a.createElement("th",null,"Version"))),r.a.createElement("tbody",null,r.a.createElement("tr",null,r.a.createElement("td",null,"autoTransferTime"),r.a.createElement("td",null,"Auto set start date time to 00:00:00 and end date time to 23:59:59"),r.a.createElement("td",null,"boolean"),r.a.createElement("td",null,"true"),r.a.createElement("td",null))))))))},Rsk4:function(e,n,t){"use strict";t.r(n);var o=t("9og8"),r=t("WmNS"),s=t.n(r),a=t("LtsZ"),i="import React from 'react';\n\nimport { JobStatusTag } from '@medisys/component';\n// import '@medisys/component/dist/@medisys/component.css';\nexport default function() {\n  const btnConfig = {\n    variant: 'contained',\n    color: 'secondary',\n  };\n  return (\n    <div>\n      <JobStatusTag status=\"New\" />\n    </div>\n  );\n}",l="import React from 'react';\n\nimport { abc } from '@medisys/test';\nimport { Button } from '@medisys/component';\nimport { Input } from 'antd';\n\nexport default function() {\n  return (\n    <div>\n      <Input id=\"input-test\" style={{ width: 300, marginRight: 10 }} />\n      <Button\n        onClick={() => {\n          abc(document.getElementById('input-test').value);\n        }}\n      >\n        Test\n      </Button>\n    </div>\n  );\n}",c="import React from 'react';\nimport { MIConfig } from '@medisys/utils';\nimport { Button } from '@medisys/component';\n\nconst { ProgressButton } = Button;\n\nexport default function() {\n  const updateLoading = status => {\n    MIConfig.updateState({\n      loading: {\n        models: {\n          somename: status,\n        },\n      },\n    });\n  };\n  return (\n    <div>\n      <ProgressButton\n        model=\"somename\"\n        onClick={() => {\n          updateLoading(true);\n          setTimeout(() => {\n            updateLoading(false);\n          }, 5000);\n        }}\n      >\n        Async Call\n      </ProgressButton>\n      <ProgressButton loading>Forever loading</ProgressButton>\n    </div>\n  );\n}",d="import React, { useEffect, useState, useMemo } from 'react';\nimport { Input, ConfigProvider } from 'antd';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {\n  Form,\n  Button,\n  Modal,\n  Select,\n  ProSelect,\n  ProForm,\n} from '@medisys/component';\nimport { MIConfig, sleep } from '@medisys/utils';\n// console.dir(ConfigProvider);\n// console.dir(ConfigProvider.ConfigContext.Consumer);\n\nconst codeLoading = {};\n\nMIConfig.setConfig({\n  cache: false,\n  dataLoader: async ({ code }) => {\n    // console.log(code);\n\n    if (codeLoading[code]) {\n      return;\n    }\n    console.log(code + ' start');\n    codeLoading[code] = true;\n    await sleep(3000);\n    console.log(code + ' end');\n    delete codeLoading[code];\n    return test_data[code];\n  },\n});\n// Select.config.loader({\n//   loader: async ({ code }) => {\n//     if (codeLoading[code]) {\n//       return;\n//     }\n//     console.log(code + ' start');\n//     codeLoading[code] = true;\n//     await sleep(10000);\n//     console.log(code + ' end');\n//     delete codeLoading[code];\n\n//     MIConfig.updateState({\n//       dataSource: {\n//         [code]: users,\n//       },\n//     });\n//   },\n// });\n\nconst test_data = {\n  users: [\n    { value: 1, label: 'U_ABC', roleId: 1 },\n    { value: 2, label: 'U_CDE', roleId: 1 },\n    { value: 3, label: 'U_FGH', roleId: 1 },\n    { value: 4, label: 'U_EDS', roleId: 1 },\n    { value: 5, label: 'U_ANI', roleId: 1 },\n    { value: 6, label: 'U_LIT', roleId: 2 },\n    { value: 7, label: 'U_RVS', roleId: 2 },\n    { value: 8, label: 'U_UIJ', roleId: 2 },\n  ],\n  roles: [\n    { value: 1, label: 'R_ABC' },\n    { value: 2, label: 'R_CDE' },\n  ],\n};\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\ninterface T2 {\n  value: string;\n  label: string;\n}\nconst DataSelectDemo = () => {\n  const [v, setV] = useState(0);\n  const myRef = React.useRef();\n  const [ds, setDs] = useState([]);\n  useEffect(() => {\n    // console.log(myRef);\n    setTimeout(() => {\n      setDs([\n        { value: 1, label: 'U_ABC', roleId: 1 },\n        { value: 2, label: 'U_CDE', roleId: 1 },\n        { value: 3, label: 'U_FGH', roleId: 1 },\n        { value: 4, label: 'U_EDS', roleId: 1 },\n        { value: 5, label: 'U_ANI', roleId: 1 },\n        { value: 6, label: 'U_LIT', roleId: 2 },\n        { value: 7, label: 'U_RVS', roleId: 2 },\n        { value: 8, label: 'U_UIJ', roleId: 2 },\n      ]);\n    }, 4000);\n  }, []);\n\n  const changeVal = useMemo(() => {\n    return val => {\n      console.log(val);\n      setV(val);\n    };\n  }, []);\n  const [currentRole, setCurrentRole] = useState(1);\n  const [currentUser, setCurrentUser] = useState(1);\n\n  return (\n    <>\n      <Select\n        placeholder=\"Test\"\n        code=\"abc\"\n        request={async (\n          // \u7b2c\u4e00\u4e2a\u53c2\u6570 params \u67e5\u8be2\u8868\u5355\u548c params \u53c2\u6570\u7684\u7ed3\u5408\n          // \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\u4e00\u5b9a\u4f1a\u6709 pageSize \u548c  current \uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u662f antd \u7684\u89c4\u8303\n          params: {\n            pageSize: number;\n            current: number;\n          },\n          sort,\n          filter,\n        ) => {\n          return new Promise(resolve => {\n            resolve({\n              data: [{ value: 1, label: 123 }],\n\n              success: true,\n              total: 123,\n            });\n          });\n        }}\n        // onChange={(v: number, opt) => {\n        //   setCurrentRole(v);\n        //   setCurrentUser(undefined);\n\n        //   console.log(v, opt);\n        // }}\n        // onDataSourceChange={arr => {\n        //   console.log(arr);\n        // }}\n        // value={currentRole}\n      />\n      <Select\n        placeholder=\"Role\"\n        code=\"roles\"\n        mode=\"multiple\"\n        onChange={(v: number, opt) => {\n          setCurrentRole(v);\n          setCurrentUser(undefined);\n\n          console.log(v, opt);\n        }}\n        onDataSourceChange={arr => {\n          console.log(arr);\n        }}\n        readonly\n        value={[1, 2]}\n      />\n      <Select\n        placeholder=\"User\"\n        code=\"users\"\n        filter={(v, opt) => {\n          console.log(v.roleId === currentRole);\n          return v.roleId === currentRole;\n        }}\n        onChange={(v: number, opt) => {\n          console.log(v, opt);\n\n          setCurrentUser(v);\n          setCurrentRole(opt.data.roleId);\n        }}\n        value={currentUser}\n        dependencies={[currentRole]}\n      />\n      <Select\n        placeholder=\"User\"\n        dataSource={ds}\n        onChange={(v: number, opt) => {\n          console.log(v, opt);\n\n          setCurrentUser(v);\n          setCurrentRole(opt.data.roleId);\n        }}\n        value={currentUser}\n        dependencies={[currentRole]}\n      />\n      <ProForm initialValues={{ testuser: 1 }}>\n        <ProSelect\n          placeholder=\"User\"\n          dataSource={ds}\n          name=\"testuser\"\n          onChange={(v: number, opt) => {\n            console.log(v, opt);\n\n            setCurrentUser(v);\n            setCurrentRole(opt.data.roleId);\n          }}\n          value={currentUser}\n          valueField=\"value\"\n          displayField=\"label\"\n        />\n      </ProForm>\n\n      {/* <div>\n        <Button\n          onClick={() => {\n            const start = getRandomInt(test_data.users.length - 1);\n            const end = start + getRandomInt(test_data.users.length - start);\n            MIConfig.updateState({\n              dataSource: {\n                users: test_data.users.slice(start, end),\n              },\n            });\n          }}\n        >\n          Load Data\n        </Button>\n        <Select ref={myRef} code=\"users\" mode=\"tags\" />\n      </div>\n\n      <div>\n        <Button\n          onClick={() => {\n            const start = getRandomInt(test_data.roles.length - 1);\n            const end = start + getRandomInt(test_data.roles.length - start);\n            MIConfig.updateState({\n              dataSource: {\n                roles: test_data.roles.slice(start, end),\n              },\n            });\n          }}\n        >\n          Load Data\n        </Button>\n        <Select\n          code=\"roles\"\n          // filter={r => {\n          //   console.log(r);\n          //   return r.value === 7;\n          // }}\n          mode=\"tags\"\n          value={1}\n          onChange={changeVal}\n        />\n      </div>\n\n      <div>\n        <Button\n          onClick={() => {\n            const start = getRandomInt(test_data.roles.length - 1);\n            const end = start + getRandomInt(test_data.roles.length - start);\n            MIConfig.updateState({\n              dataSource: {\n                roles: test_data.roles.slice(start, end),\n              },\n            });\n          }}\n        >\n          Load Data\n        </Button>\n        <Select\n          code=\"roles\"\n          // url={'test/weree'}\n          // mode=\"tags\"\n          // filter={r => {\n          //   return r.value === 7;\n          // }}\n          dependencies={[v]}\n          value={123}\n        />\n      </div> */}\n    </>\n  );\n};\n\nexport default DataSelectDemo;",u="import React, { useEffect, useState, useMemo } from 'react';\nimport { Input, ConfigProvider, Table } from 'antd';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Form, Button, Modal, Select, List } from '@medisys/component';\nimport { MIConfig, sleep } from '@medisys/utils';\n// console.dir(ConfigProvider);\n// console.dir(ConfigProvider.ConfigContext.Consumer);\n\nconsole.dir(Table);\nconst codeLoading = {};\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst DataSelectDemo = () => {\n  const [v, setV] = useState(0);\n  const myRef = React.useRef();\n  const changeVal = useMemo(() => {\n    return val => {\n      console.log(val);\n      setV(val);\n    };\n  }, []);\n\n  useEffect(() => {\n    console.log(myRef);\n  }, []);\n  return (\n    <>\n      <div>\n        <List\n          code=\"users\"\n          size=\"small\"\n          header={<div>Header</div>}\n          footer={<div>Footer</div>}\n          bordered\n          renderItem={item => (\n            <List.Item>\n              {item.value}/{item.label}\n            </List.Item>\n          )}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DataSelectDemo;",m="import React, { useState } from 'react';\nimport moment from 'moment';\nimport { abc } from '@medisys/test';\nimport { DatePicker, Form } from '@medisys/component';\nimport { Switch } from 'antd';\n\nconst { RangePicker } = DatePicker;\nexport default function() {\n  const [form] = Form.useForm();\n  const [autoTransfer, setAutoTransfer] = useState(true);\n  return (\n    <div>\n      <Switch\n        checkedChildren=\"True\"\n        unCheckedChildren=\"False\"\n        checked={autoTransfer}\n        onChange={v => {\n          setAutoTransfer(v);\n        }}\n      />\n      <Form\n        form={form}\n        initialValues={{\n          autoTransfer: true,\n          dateFilter: [moment(), moment()],\n        }}\n      >\n        <Form.Item shouldUpdate>\n          {({ getFieldsValue }) => {\n            const { dateFilter = [], autoTransfer } = getFieldsValue();\n            // console.log(dateFilter, autoTransfer);\n            return (\n              <div>\n                Date selected : {dateFilter[0]?.format()} to{' '}\n                {dateFilter[1]?.format()}\n              </div>\n            );\n          }}\n        </Form.Item>\n        <Form.Item name=\"dateFilter\">\n          <RangePicker\n            autoTransfer={autoTransfer}\n            // autoTransferTime={}\n            // onChange={v => {\n            //   form.setFields([\n            //     {\n            //       name: 'dateFilter',\n            //       value: v,\n            //     },\n            //   ]);\n            //   console.log(v);\n            // }}\n          />\n        </Form.Item>\n        {/* <Form.Item shouldUpdate>\n          {form => {\n            const { dateFilter = [], autoTransfer } = form.getFieldsValue();\n            console.log(dateFilter, autoTransfer);\n            return (\n              <RangePicker\n                value={dateFilter}\n                // autoTransferTime={}\n                onChange={v => {\n                  form.setFields([\n                    {\n                      name: 'dateFilter',\n                      value: v,\n                    },\n                  ]);\n                  console.log(v);\n                }}\n              />\n            );\n          }}\n        </Form.Item> */}\n      </Form>\n    </div>\n  );\n}",p="import React, { useState } from 'react';\nimport { DragDropList, DragDropListTypes } from '@medisys/component';\nimport { Card } from 'antd';\nimport { Property } from 'csstype';\n\nconst lists = [\n  {\n    id: 'list-1',\n    backgroundColor: '#009933',\n    title: 'New',\n    items: [\n      {\n        id: 'item-1',\n        content: 'Annie Moon',\n      },\n      {\n        id: 'item-2',\n        content: 'Jack Bone',\n      },\n      {\n        id: 'item-3',\n        content: 'Helen Wells',\n      },\n    ],\n  },\n  {\n    id: 'list-2',\n    backgroundColor: '#996600',\n    title: 'Prepared',\n    items: [\n      {\n        id: 'item-4',\n        content: 'Juses Moses',\n      },\n      {\n        id: 'item-5',\n        content: 'Guadiola',\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const initData: {\n    lists: DragDropListTypes.List[];\n    backgroundColor: Property.BackgroundColor;\n  } = {\n    lists: lists,\n    backgroundColor: 'none',\n  };\n\n  const [state, setState] = useState(initData);\n\n  const onDragEndHandler = (dragEndRespond: DragEndRespond) => {\n    const { sourceListId, destListId, destIndex } = dragEndRespond;\n\n    if (destListId === undefined || destIndex === undefined) return;\n\n    const { lists } = state;\n\n    let modifiedLists =\n      sourceListId !== destListId\n        ? moveBewteenLists(lists, dragEndRespond)\n        : orderInsideTheList(lists, dragEndRespond);\n\n    setState({ ...state, lists: modifiedLists });\n  };\n\n  const onTitleRender = (listId: string) => {\n    console.log('title rendering:', listId);\n    return (\n      <h2\n        style={{ textAlign: 'center', color: 'white', verticalAlign: 'middle' }}\n      >\n        {state.lists.filter(list => list.id === listId)[0].title}\n      </h2>\n    );\n  };\n\n  const onItemRender = (itemId: string) => {\n    return (\n      <Card hoverable style={{ margin: '5px' }}>\n        {\n          state.lists\n            .flatMap(l => l.items)\n            .filter(item => item.id === itemId)[0].content\n        }\n      </Card>\n    );\n  };\n\n  return (\n    <div style={{ height: '500px', overflow: 'auto' }}>\n      <DragDropList\n        {...state}\n        onDragEnd={onDragEndHandler}\n        onTitleRender={onTitleRender}\n        onItemRender={onItemRender}\n      />\n    </div>\n  );\n};\n\nfunction moveBewteenLists(\n  lists: DragDropListTypes.List[],\n  dragEndRespond: DragDropListTypes.DragEndRespond,\n): any {\n  return lists.map(list => {\n    const { sourceListId, itemId, destListId, destIndex } = dragEndRespond;\n    debugger;\n    //Remove the item from the source\n    if (list.id === sourceListId)\n      return {\n        ...list,\n        items: list.items.filter(item => item.id !== itemId),\n      };\n\n    //Add the item to the source\n    if (list.id === destListId) {\n      const sourceList = lists.filter(list => list.id === sourceListId)[0];\n      const sourceItem = sourceList.items.filter(item => item.id === itemId)[0];\n      return {\n        ...list,\n        items: [\n          ...list.items.slice(0, destIndex),\n          sourceItem,\n          ...list.items.slice(destIndex),\n        ],\n      };\n    }\n\n    return { ...list };\n  });\n}\n\nfunction orderInsideTheList(\n  lists: DragDropListTypes.List[],\n  dragEndRespond: DragDropListTypes.DragEndRespond,\n): any {\n  const {\n    sourceListId,\n    itemId: itemId,\n    destListId,\n    destIndex,\n    sourceIndex,\n  } = dragEndRespond;\n\n  if (sourceIndex === destIndex) return lists;\n\n  return lists.map(list => {\n    if (list.id !== destListId) {\n      return list;\n    }\n\n    const sourceItem = list.items.filter(item => item.id === itemId)[0];\n\n    const clone = [...list.items];\n    clone.splice(sourceIndex, 1);\n    clone.splice(destIndex, 0, sourceItem);\n\n    return {\n      ...list,\n      items: [...clone],\n    };\n  });\n}",f="import React, { useEffect, useState, useCallback } from 'react';\nimport request from 'umi-request';\nimport {\n  Input,\n  Select,\n  ConfigProvider,\n  Divider,\n  message,\n  notification,\n} from 'antd';\nimport { Form, Button, Modal } from '@medisys/component';\nimport {\n  subscribeTopicAsync,\n  initFirebaseMessagingAsync,\n  sendMessageAsync,\n  unsubscribeTopicAsync,\n} from '@medisys/notification';\n\nimport { useBoolean } from 'ahooks';\n\nconst MessagingDemo = () => {\n  const [state, { toggle, setTrue, setFalse }] = useBoolean(false);\n  const [\n    state2,\n    { toggle: toggle2, setTrue: setTrue2, setFalse: setFalse2 },\n  ] = useBoolean(false);\n  const [form] = Form.useForm();\n\n  const [registrationToken, setRegistrationToken] = useState('');\n  const subscribeTopic = useCallback(\n    token => {\n      const topic = form.getFieldValue('topic');\n      subscribeTopicAsync({\n        token: typeof token === 'string' ? token : registrationToken,\n        topic,\n      })\n        .then(r => {\n          setTrue2();\n        })\n        .catch(error => {\n          message.error('Fail to subscribe topic: ' + topic);\n          console.log(error);\n        });\n    },\n    [registrationToken, form],\n  );\n  const unsubscribeTopic = useCallback(\n    e => {\n      const topic = form.getFieldValue('topic');\n\n      console.log(e);\n      unsubscribeTopicAsync({\n        token: registrationToken,\n        topic,\n      })\n        .then(r => {\n          setFalse2();\n        })\n        .catch(error => {\n          message.error('Fail to unsubscribe topic: ' + topic);\n          console.log(error);\n        });\n    },\n    [registrationToken, form],\n  );\n  useEffect(() => {\n    initFirebaseMessagingAsync({\n      onGetFirebaseConfig: async () => {\n        const response = await request(\n          'https://localhost:44397/api/FirebaseMessaging/Config',\n        );\n        return response?.data;\n      },\n      onGetSenderToken: async () => {\n        const response = await request(\n          'https://localhost:44397/api/FirebaseMessaging/SenderToken',\n        );\n        form.setFieldsValue({\n          senderToken: response?.data,\n        });\n        return response?.data;\n      },\n      onTokenReceived: async token => {\n        setTrue();\n        setRegistrationToken(token);\n\n        subscribeTopic(token);\n      },\n      onMessageReceived: payload => {\n        const { data, from, priority, ...resetProps } = payload;\n\n        const { notification, ...restData } = data || {};\n        const msg = `${JSON.stringify(payload)}`;\n        const v = form.getFieldsValue();\n        form.setFieldsValue({\n          ...v,\n          receiveMessage: (v.receiveMessage || '') + msg + '\\n',\n        });\n      },\n    }).catch(error => {\n      message.error(error?.message);\n    });\n  }, []);\n\n  return (\n    <>\n      <div>{state && 'Firebase Messaging active'}</div>\n      <div>{state2 && 'Topic subscribed '}</div>\n\n      <Form\n        form={form}\n        discardCheck={false}\n        initialValues={{\n          topic: 'MyTestTopic',\n        }}\n        onFinish={values => {\n          sendMessageAsync({\n            identity: { topic: form.getFieldValue('topic') },\n            title: 'A message from Medisys Lab',\n            data: {\n              content: values.messageBody,\n              notification: {\n                body: 'I am a testing message body',\n              },\n            },\n          }).catch(error => {\n            message.error(\n              'Fail to send message, check your sender token is valid',\n            );\n          });\n        }}\n      >\n        <Form.Item name=\"topic\" rules={[{ required: true }]}>\n          <Input placeholder=\"Input topic here\" />\n        </Form.Item>\n        <Form.Item name=\"receiveMessage\">\n          <Input.TextArea\n            readOnly\n            placeholder=\"Message received display here\"\n            rows={15}\n          />\n        </Form.Item>\n        <Form.Item name=\"senderToken\" rules={[{ required: true }]}>\n          <Input placeholder=\"Place sender token here\" />\n        </Form.Item>\n        <Form.Item name=\"messageBody\" rules={[{ required: true }]}>\n          <Input.TextArea\n            placeholder=\"Type in the message you want to send\"\n            rows={4}\n          />\n        </Form.Item>\n        <Button onClick={form.submit}>Send Message</Button>\n        <Button disabled={state2} onClick={subscribeTopic}>\n          Subscribe Topic\n        </Button>\n        <Button disabled={!state2} onClick={unsubscribeTopic}>\n          Unsubscribe Topic\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default MessagingDemo;",g="import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Basic from './basic';\nimport styles from './index.less';\nconst Test = () => <div style={{ textAlign: 'center' }}>Another Test Page</div>;\n\nexport default () => {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul className={styles.ul}>\n            <li>\n              <Link to=\"/\">[Form]</Link>\n            </li>\n            <li>\n              <Link to=\"/anotherpage\">[Another page]</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/anotherpage\">\n            <Test />\n          </Route>\n\n          <Route path=\"/\">\n            <Basic />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};",v="import React, { useState } from 'react';\nimport { Select, Form as AntdForm } from 'antd';\nimport { Input, Form, Button, Modal } from '@medisys/component';\n// import { useBoolean } from 'ahooks';\n\nimport './basic.less';\n// console.log(Button);\nconst { Option } = Select;\n\nconst defaultFormConfig = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n  initialValues: {\n    note: '',\n  },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst Demo = () => {\n  const [form] = Form.useForm();\n  // const a =AntdForm.useForm();\n  const onGenderChange = (value: any) => {\n    switch (value) {\n      case 'male':\n        form.setFieldsValue({ note: 'Hi, man!' });\n        return;\n      case 'female':\n        form.setFieldsValue({ note: 'Hi, lady!' });\n        return;\n      case 'other':\n        form.setFieldsValue({ note: 'Hi there!' });\n        return;\n    }\n  };\n\n  const onFinish = (values: any) => {\n    console.log(values);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const onRemove = () => {\n    setClear(true);\n  };\n\n  const [clear, setClear] = useState(false);\n  return (\n    <>\n      {clear ? (\n        <div>Form Removed</div>\n      ) : (\n        <Form\n          {...defaultFormConfig}\n          discardCheck={true}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n        >\n          <div>\n            <Form.Item label=\"Form Status\" shouldUpdate>\n              {(f: any) => {\n                return f.isFieldsTouched() ? (\n                  <span style={{ color: 'red' }}>Dirty</span>\n                ) : (\n                  <span style={{ color: 'green' }}>Initial</span>\n                );\n              }}\n            </Form.Item>\n            <Form.Item name=\"note\" label=\"Note\" rules={[{ required: true }]}>\n              <Input />\n            </Form.Item>\n            <Form.Item\n              name=\"gender\"\n              label=\"Gender\"\n              rules={[{ required: true }]}\n            >\n              <Select\n                placeholder=\"Select a option and change input text above\"\n                onChange={onGenderChange}\n                allowClear\n              >\n                <Option value=\"male\">male</Option>\n                <Option value=\"female\">female</Option>\n                <Option value=\"other\">other</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item\n              noStyle\n              shouldUpdate={(prevValues, currentValues) =>\n                prevValues.gender !== currentValues.gender\n              }\n            >\n              {({ getFieldValue, ...rest }) => {\n                return getFieldValue('gender') === 'other' ? (\n                  <Form.Item\n                    name=\"customizeGender\"\n                    label=\"Customize Gender\"\n                    rules={[{ required: true }]}\n                  >\n                    <Input />\n                  </Form.Item>\n                ) : null;\n              }}\n            </Form.Item>\n            <Form.Item {...tailLayout}>\n              <Button danger htmlType=\"submit\">\n                Submit\n              </Button>\n              <Button onClick={onReset}>Reset</Button>\n              <Button danger triggerDiscard onClick={onRemove}>\n                Remove form\n              </Button>\n            </Form.Item>\n          </div>\n        </Form>\n      )}\n    </>\n  );\n};\n\nexport default Demo;",b=".ant-form-item-control-input-content {\n  button {\n    margin-right: 10px;\n  }\n}",h=".ul {\n  list-style: none;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  padding-left: 0;\n}",y="import React, { useState } from 'react';\nimport { Input, Select } from 'antd';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Form, Button, Modal } from '@medisys/component';\nimport { useBoolean } from 'ahooks';\nimport Basic from './basic';\nconst ModalDemo = () => {\n  const [state, { toggle, setTrue, setFalse }] = useBoolean(false);\n\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setTrue();\n        }}\n      >\n        Show Modal\n      </Button>\n      <Modal\n        visible={state}\n        onCancel={() => {\n          setFalse();\n        }}\n        onOk={() => {\n          setFalse();\n        }}\n      >\n        <Basic />\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalDemo;",I="import React, { useEffect, useState } from 'react';\nimport { ConfigProvider } from 'antd';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {\n  Form,\n  Button,\n  Modal,\n  Select,\n  Input,\n  RefInputProps,\n} from '@medisys/component';\nimport { MIConfig, sleep } from '@medisys/utils';\n// console.dir(ConfigProvider);\n// console.dir(ConfigProvider.ConfigContext.Consumer);\n\nconst InputBasicDemo = () => {\n  const myRef = React.useRef<RefInputProps>();\n  // console.log(1);\n  // console.log(myRef);\n  useEffect(() => {\n    if (myRef.current) console.log(myRef.current);\n    // myRef.current.focus()\n    // console.log(myRef.current.);\n  }, []);\n  return (\n    <>\n      <Input value=\"123\" text />\n    </>\n  );\n};\n\nexport default InputBasicDemo;",C="import React, { useEffect, useState } from 'react';\nimport { Input, Select, ConfigProvider } from 'antd';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Form, Button, Modal } from '@medisys/component';\nimport { MIConfig } from '@medisys/utils';\nimport { useBoolean } from 'ahooks';\nlet testLoadingState = false;\n// console.dir(ConfigProvider);\n// console.dir(ConfigProvider.ConfigContext.Consumer);\n\nconst ModalDemo = () => {\n  const [state, { toggle, setTrue, setFalse }] = useBoolean(false);\n  const [\n    state2,\n    { toggle: toggle2, setTrue: setTrue2, setFalse: setFalse2 },\n  ] = useBoolean(false);\n\n  // useEffect(() => {\n  //   setInterval(() => {\n  //     toggle2();\n  //   }, 3000);\n  // }, []);\n  // const codeset = {\n  //   users: [\n  //     { id: 1, name: 'ABC' },\n  //     { id: 2, name: 'CDE' },\n  //   ],\n  // };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      testLoadingState = !testLoadingState;\n      MIConfig.updateState({\n        loading: {\n          models: {\n            somename: testLoadingState,\n          },\n        },\n        codeset: {\n          users: [\n            { id: 1, name: 'ABC' },\n            { id: 2, name: 'CDE' },\n          ],\n        },\n      });\n    }, 5000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  const { getPrefixCls, autoInsertSpaceInButton, direction } = React.useContext(\n    ConfigProvider.ConfigContext,\n  );\n  // console.log(\n  //   getPrefixCls(),\n  //   getPrefixCls('affix', '123'),\n  //   getPrefixCls,\n  //   autoInsertSpaceInButton,\n  //   direction,\n  // );\n  // Modal.warning\n  console.log(MIConfig);\n  return (\n    <>\n      <Button\n        onClick={() => {\n          setTrue();\n        }}\n      >\n        Show Modal\n      </Button>\n      {/* <ConfigProvider.ConfigContext.Consumer>\n        {context => {\n          const { getPrefixCls } = context;\n          console.log(context, getPrefixCls(), getPrefixCls('affix', '123'));\n          return <div>tet</div>;\n        }}\n      </ConfigProvider.ConfigContext.Consumer> */}\n      <Modal\n        visible={state}\n        model=\"somename\"\n        onCancel={() => {\n          setFalse();\n        }}\n        onOk={() => {\n          setFalse();\n        }}\n      >\n        <div>I toggle loading every 5 seconds</div>\n        <Button\n          onClick={() => {\n            setTrue2();\n          }}\n        >\n          Show Another Modal\n        </Button>\n      </Modal>\n      <Modal\n        visible={state2}\n        onCancel={() => {\n          setFalse2();\n        }}\n        onOk={() => {\n          setFalse2();\n        }}\n      >\n        <div>I am not watching any model, so I dun have loading block</div>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalDemo;";n["default"]={"component-job-status-tag":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"eDb9"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{jsx:i}},dependencies:{react:{version:">=16.9.0"},"@medisys/component":{version:"0.1.162"},"react-dom":{version:">=16.9.0"}},identifier:"component-job-status-tag"}},"job-status-tag-demo":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){var n,o,r;return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return n=t("K+nK"),e.t0=n,e.next=4,Promise.resolve().then(t.t.bind(null,"q1tI",7));case 4:return e.t1=e.sent,o=(0,e.t0)(e.t1),r=function(){return o["default"].createElement("h2",null,"test")},e.abrupt("return",r);case 8:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{jsx:"import React from 'react';\n\nexport default () => <h2>test</h2>;"}},dependencies:{react:{version:"17.0.2"}},identifier:"job-status-tag-demo"}},"button-button":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"Gji3"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:l}},dependencies:{antd:{version:"4.16.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"@medisys/test":{version:"0.1.98"},"@medisys/component":{version:"0.1.162"},"react-dom":{version:">=16.9.0"}},title:"Basic usage",description:'<div class="markdown"><p>Basic usage example.</p></div>',identifier:"button-button"}},"button-progress-button":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"AFav"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:c}},dependencies:{react:{version:">=16.9.0"},"@medisys/utils":{version:"0.1.161"},"@medisys/component":{version:"0.1.162"},"react-dom":{version:">=16.9.0"}},title:"Auto disable on async call",description:'<div class="markdown"><p>To auto enable/disable button, subscribe to model by setting the <code>mode</code> property on the Button.</p></div>',identifier:"button-progress-button"}},"component-data-source":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(5),t.e(24),t.e(6)]).then(t.bind(null,"fEj9"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:d}},dependencies:{react:{version:">=16.9.0"},"@medisys/component":{version:"0.1.162"},"@medisys/utils":{version:"0.1.161"},"react-dom":{version:">=16.9.0"}},componentName:"data-source",title:"Update DataSource",description:'<div class="markdown"><p>use <code>MIConfig</code> to update dataSource</p></div>',identifier:"component-data-source"}},"data-source-list":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(5),t.e(24),t.e(6)]).then(t.bind(null,"YWjI"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:u}},dependencies:{antd:{version:"4.16.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"@medisys/component":{version:"0.1.162"},"react-dom":{version:">=16.9.0"}},componentName:"data-source",title:"Update DataSource",description:'<div class="markdown"><p>use <code>MIConfig</code> to update dataSource</p></div>',identifier:"data-source-list"}},"date-picker-range-picker":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"JH3V"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:m}},dependencies:{antd:{version:"4.16.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},moment:{version:"2.29.1"},"@medisys/component":{version:"0.1.162"},"react-dom":{version:">=16.9.0"}},title:"Basic usage",description:'<div class="markdown"><p>Basic usage example.</p></div>',identifier:"date-picker-range-picker"}},"drag-drop-list-basic":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"7WgX"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:p}},dependencies:{antd:{version:"4.16.0",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"@medisys/component":{version:"0.1.162"},"react-dom":{version:">=16.9.0"}},title:"Basic usage",description:'<div class="markdown"><p>Basic usage example.</p></div>',identifier:"drag-drop-list-basic"}},"firebase-messaging":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"KFJW"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:f}},dependencies:{antd:{version:"4.16.0",css:"antd/dist/antd.css"},react:{version:"^16.8.6 || ^17.0"},"umi-request":{version:"1.3.9"},"@medisys/component":{version:"0.1.162"},"@medisys/notification":{version:"0.1.148"},ahooks:{version:"2.10.4"},"react-dom":{version:">=16.9.0"}},title:"Receive messaging from firebase pushing",description:'<div class="markdown"><p>TBD</p></div>',identifier:"firebase-messaging"}},"form-main":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"kXXb"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:g},"basic.tsx":{import:"./basic",content:v},"basic.less":{import:"./basic.less",content:b},"index.less":{import:"./index.less",content:h}},dependencies:{react:{version:">=16.9.0"},"react-router-dom":{version:"5.2.0"},antd:{version:"4.16.0",css:"antd/dist/antd.css"},"@medisys/component":{version:"0.1.162"},"react-dom":{version:">=16.9.0"}},iframe:"true // Set to a numeric value to control the height of the iframe",title:"Dirty Check Form",description:'<div class="markdown"><p>Form have dirty field checking prompt</p></div>',identifier:"form-main"}},"form-modal":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"VNtw"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:y},"basic.tsx":{import:"./basic",content:v},"basic.less":{import:"./basic.less",content:b}},dependencies:{react:{version:">=16.9.0"},"@medisys/component":{version:"0.1.162"},ahooks:{version:"2.10.4"},"react-dom":{version:">=16.9.0"},antd:{version:"4.16.0",css:"antd/dist/antd.css"}},title:"Form inside Modal",description:'<div class="markdown"><p>If there is a Form component inside Modal, auto dirty check when close Modal</p></div>',identifier:"form-modal"}},"input-basic":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"lIp6"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:I}},dependencies:{react:{version:">=16.9.0"},"@medisys/component":{version:"0.1.162"},"react-dom":{version:">=16.9.0"}},title:"Basic usage",description:'<div class="markdown"><ul>\n<li></li>\n</ul></div>',identifier:"input-basic"}},"modal-modal":{component:Object(a["dynamic"])({loader:function(){var e=Object(o["a"])(s.a.mark((function e(){return s.a.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(1),t.e(3),t.e(5),t.e(25),t.e(7)]).then(t.bind(null,"enQO"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}()}),previewerProps:{sources:{_:{tsx:C}},dependencies:{antd:{version:"4.16.0",css:"antd/dist/antd.css"},react:{version:"^16.8.6 || ^17.0"},"@medisys/component":{version:"0.1.162"},"@medisys/utils":{version:"0.1.161"},ahooks:{version:"2.10.4"},"react-dom":{version:">=16.9.0"}},title:"Toggle loading based on state update",description:'<div class="markdown"><p>use <code>model</code> to auto trigger loading block</p></div>',identifier:"modal-modal"}}}},TIsu:function(e,n,t){},x2v5:function(e){e.exports=JSON.parse("{}")}}]);